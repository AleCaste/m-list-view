{"version":3,"sources":["webpack:///./examples/indexed-sticky.js"],"names":["NUM_SECTIONS","NUM_ROWS_PER_SECTION","genData","ds","dataBlob","sectionIDs","rowIDs","ii","sectionName","String","fromCharCode","push","jj","rowName","cloneWithRowsAndSections","Demo","props","getSectionData","sectionID","getRowData","rowID","dataSource","ListView","DataSource","getSectionHeaderData","rowHasChanged","row1","row2","sectionHeaderHasChanged","s1","s2","state","isLoading","setTimeout","setState","padding","sectionData","color","backgroundColor","rowData","stickyStyle","zIndex","topOffset","top","console","log","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"examples/indexed-sticky.js","sourcesContent":["/* eslint-disable no-console */\nimport 'rmc-list-view/assets/index.less';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ListView from 'rmc-list-view';\n\nconst NUM_SECTIONS = 20;\nconst NUM_ROWS_PER_SECTION = 10;\n\nfunction genData(ds) {\n  const dataBlob = {};\n  const sectionIDs = [];\n  const rowIDs = [];\n  for (let ii = 0; ii < NUM_SECTIONS; ii++) {\n    const sectionName = String.fromCharCode(65 + ii);\n    sectionIDs.push(sectionName);\n    dataBlob[sectionName] = sectionName;\n    rowIDs[ii] = [];\n\n    for (let jj = 0; jj < NUM_ROWS_PER_SECTION; jj++) {\n      const rowName = `S${ii}, R${jj}`;\n      rowIDs[ii].push(rowName);\n      dataBlob[rowName] = rowName;\n    }\n  }\n  return ds.cloneWithRowsAndSections(dataBlob, sectionIDs, rowIDs);\n}\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    const getSectionData = (dataBlob, sectionID) => dataBlob[sectionID];\n    const getRowData = (dataBlob, sectionID, rowID) => dataBlob[rowID];\n\n    const dataSource = new ListView.DataSource({\n      getRowData,\n      getSectionHeaderData: getSectionData,\n      rowHasChanged: (row1, row2) => row1 !== row2,\n      sectionHeaderHasChanged: (s1, s2) => s1 !== s2,\n    });\n\n    this.state = {\n      dataSource,\n      isLoading: true,\n    };\n  }\n\n  componentDidMount() {\n    // simulate initial Ajax\n    setTimeout(() => {\n      this.setState({\n        dataSource: genData(this.state.dataSource),\n        isLoading: false,\n      });\n    }, 600);\n  }\n\n  render() {\n    return (<div>\n      <ListView.IndexedList\n        dataSource={this.state.dataSource}\n        renderHeader={() => <span style={{ padding: 10 }}>header</span>}\n        renderFooter={() => <span style={{ padding: 10 }}>footer</span>}\n        renderSectionHeader={(sectionData) => (\n          <div style={{ color: 'blue', padding: 10, backgroundColor: '#ddd' }}>\n            {sectionData}\n          </div>\n        )}\n        renderRow={(rowData) => (<div style={{ padding: 10 }}>Hello: {rowData}</div>)}\n        stickyHeader\n        stickyProps={{\n          stickyStyle: { zIndex: 999 },\n          topOffset: -83,\n          // isActive: false,\n        }}\n        quickSearchBarStyle={{\n          top: 20,\n        }}\n        onQuickSearch={(sectionID) => console.log(sectionID) }\n        sectionBodyClassName=\"sb\"\n      />\n    </div>);\n  }\n}\n\nReactDOM.render(<Demo />, document.getElementById('__react-content'));\n\n\n\n// WEBPACK FOOTER //\n// ./examples/indexed-sticky.js"],"sourceRoot":""}